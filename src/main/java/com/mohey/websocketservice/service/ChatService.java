package com.mohey.websocketservice.service;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.List;import java.util.Optional;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.messaging.simp.SimpMessageSendingOperations;import org.springframework.stereotype.Service;import com.mohey.websocketservice.dto.ChatMember;import com.mohey.websocketservice.dto.ChatMessage;import com.mohey.websocketservice.dto.ChatRoom;import com.mohey.websocketservice.dto.Group;import com.mohey.websocketservice.dto.ReceiveGroup;import com.mohey.websocketservice.repository.ChatMemberRepository;import com.mohey.websocketservice.repository.ChatRepository;import com.mohey.websocketservice.repository.ChatRoomRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;@Service@RequiredArgsConstructor@Slf4jpublic class ChatService {	//@Autowired	private final ChatRepository chatRepository;	private final ChatMemberRepository chatMemberRepository;	private final MongoTemplate mongoTemplate;	private final SimpMessageSendingOperations messagingTemplate;	// @Autowired	// public ChatService(ChatRepository chatRepository) {	// 	this.chatRepository = chatRepository;	// }	public void broadcasting(ChatMessage message) {		LocalDateTime currentTime = LocalDateTime.now();		message.setSendTime(currentTime);		//if(ChatMessage.MassageType.JOIN.equals(message.getType()))		//message.setMessage(message.getSender() + "님이 입장하셨습니다.");		if (message.getType().equals("message")) {			messagingTemplate.convertAndSend("/sub/chats/room/" + message.getGroupId(),				message); // /sub/chats/room/{roomId} - 구독		}		log.info(message.toString());		messageSave(message);	}	public void messageSave(ChatMessage message) { //메시지 저장		try {			chatRepository.save(message);  //chatting_message collection에 저장		} catch (Exception e) {			log.error(e.getMessage());		}	}	public void create(ReceiveGroup receive) { //모임 생성		try {			accept(receive); //chatting_member collection에 저장			modify(receive); //chatting_room collection에 저장		} catch (Exception e) {			log.error(e.getMessage());		}	}	public void accept(ReceiveGroup receive) { //모임 가입		try {			Group group = new Group();			group.setGroupUuid(receive.getGroupUuid());			LocalDateTime currentTime = LocalDateTime.now();			group.setConnect_time(currentTime);			Query query = new Query(Criteria.where("memberUuid").is(receive.getMemberUuid()));			ChatMember chatMember = mongoTemplate.findOne(query, ChatMember.class);			if (chatMember == null) {				chatMember = new ChatMember();				chatMember.setMemberUuid(receive.getMemberUuid());				chatMember.setGroups(new ArrayList<>());			}			// else{			// 	// 기존에 해당 그룹이 존재하는지 확인하여 업데이트 가능			// 	List<Group> groups = chatMember.getGroups();			// 	for (Group existingGroup : groups) {			// 		if (existingGroup.getGroupUuid().equals(receive.getGroupUuid())) {			// 			// 기존에 해당 그룹이 존재하는 경우 업데이트			// 			existingGroup.setConnect_time(currentTime);			// 			break;			// 		}			// 	}			// }			chatMember.getGroups().add(group); //member의 groups에 새로운 group 추가			mongoTemplate.save(chatMember); //chatting_member collection 저장		} catch (Exception e) {			log.error(e.getMessage());		}	}	public void modify(ReceiveGroup receive) { //모임 수정		try {			ChatRoom chatRoom = new ChatRoom(receive.getGroupUuid(), receive.getGroupName(), receive.getGroupType());			mongoTemplate.save(chatRoom); //chatting_room collection에 저장		} catch (Exception e) {			log.error(e.getMessage());		}	}	public void exit(ReceiveGroup receive) { //모임 퇴장		ChatMember chatMember = chatMemberRepository.findById(receive.getMemberUuid()).orElse(null);		if (chatMember != null) {			List<Group> groups = chatMember.getGroups();			groups.removeIf(group -> group.getGroupUuid().equals(receive.getGroupUuid()));			chatMember.setGroups(groups);			chatMemberRepository.save(chatMember);		}	}}